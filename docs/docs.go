// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/subscriptions/CreateSub": {
            "post": {
                "description": "Creates a new subscription with the provided details including service name, price, start date, and optional expiration date.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "subscriptions"
                ],
                "summary": "Create a new subscription",
                "parameters": [
                    {
                        "description": "New subscription details",
                        "name": "subscription",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/routes.req"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created subscription",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request body or parameters",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to create subscription",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/subscriptions/DeleteSub/{id}": {
            "delete": {
                "description": "Deletes a subscription for a specific user by subscription ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "subscriptions"
                ],
                "summary": "Delete a subscription by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Subscription ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Deleted subscription",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid subscription ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Subscription not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error deleting subscription",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/subscriptions/GetSub/{id}": {
            "get": {
                "description": "Retrieves a subscription based on the provided subscription ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "subscriptions"
                ],
                "summary": "Get subscription by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Subscription ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Subscription details",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid subscription ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Subscription not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error retrieving subscription",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/subscriptions/UpdateSub/{id}": {
            "put": {
                "description": "Updates the subscription details (service, price, start date, end date) for a specific subscription by ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "subscriptions"
                ],
                "summary": "Update an existing subscription by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Subscription ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Subscription details to update",
                        "name": "subscription",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/routes.req"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated subscription",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request body or parameters",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Subscription not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error updating subscription",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/subscriptions/total-cost/{user_id}/{subscription_service}/{start_date_from}/{start_date_to}": {
            "get": {
                "description": "Get the sum of all subscriptions costs for a user, with optional filtering by subscription service and date range.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "subscriptions"
                ],
                "summary": "Get the total cost of subscriptions for a specific user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID (UUID)",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Subscription Service Name",
                        "name": "subscription_service",
                        "in": "path"
                    },
                    {
                        "type": "string",
                        "description": "Start Date (MM-YYYY)",
                        "name": "start_date_from",
                        "in": "path"
                    },
                    {
                        "type": "string",
                        "description": "End Date (MM-YYYY)",
                        "name": "start_date_to",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Total cost of subscriptions",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid parameter",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Subscriptions not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error calculating total subscription cost",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "routes.req": {
            "description": "Request body for creating or updating a subscription",
            "type": "object",
            "properties": {
                "exp_date": {
                    "type": "string"
                },
                "price": {
                    "type": "integer"
                },
                "start_date": {
                    "type": "string"
                },
                "subscription_service": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080 (default)",
	BasePath:         "/",
	Schemes:          []string{"http"},
	Title:            "Subscription Service API",
	Description:      "API для управления подписками",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
